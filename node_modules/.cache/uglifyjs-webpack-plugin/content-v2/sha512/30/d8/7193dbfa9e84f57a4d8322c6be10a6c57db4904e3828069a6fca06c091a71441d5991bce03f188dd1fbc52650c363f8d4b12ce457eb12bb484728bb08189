{"map":"{\"version\":3,\"sources\":[\"/home/dulgeoion/projects/vitamin/src/components/subtasks/Task1B.js\",\"/home/dulgeoion/projects/vitamin/node_modules/css-loader/index.js!/home/dulgeoion/projects/vitamin/src/style.css\"],\"names\":[\"__webpack_require__\",\"Task1B\",\"props\",\"_classCallCheck\",\"this\",\"_this\",\"_possibleConstructorReturn\",\"__proto__\",\"Object\",\"getPrototypeOf\",\"call\",\"state\",\"inputValue\",\"differenceError\",\"handleInput\",\"bind\",\"_react2\",\"default\",\"Component\",\"str\",\"array\",\"split\",\"map\",\"item\",\"length\",\"i\",\"setState\",\"event\",\"target\",\"value\",\"createElement\",\"className\",\"type\",\"onChange\",\"placeholder\",\"_Hanoi2\",\"elem\",\"key\",\"exports\",\"module\",\"push\"],\"mappings\":\"kWAAAA,EAAA,SACAA,EAAA,MACAA,EAAA,6DAGMC,cAEJ,SAAAA,EAAYC,gGAAMC,CAAAC,KAAAH,GAAA,IAAAI,mKAAAC,CAAAF,MAAAH,EAAAM,WAAAC,OAAAC,eAAAR,IAAAS,KAAAN,KACVF,IADU,OAEhBG,EAAKM,OACHC,WAAY,GACZC,iBAAiB,GAGnBR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBV,GAPHA,qUAFCW,EAAAC,QAAMC,+CAYhBC,GACP,IAAIC,EAAQD,EAAIE,MAAM,OAAOC,IAAI,SAACC,GAAD,OAASA,EAAKF,MAAM,MACrD,GAAID,EAAMI,OAAO,EACf,IAAK,IAAIC,EAAI,EAAGA,EAAEL,EAAMI,OAAQC,IAC1BL,EAAMK,GAAG,GAAGL,EAAMK,EAAE,GAAG,IAAI,EAC7BrB,KAAKsB,UACHb,iBAAiB,IAGnBT,KAAKsB,UACHb,iBAAiB,wCAOfc,GACVvB,KAAKsB,UACHd,WAAYe,EAAMC,OAAOC,yCAKzB,OACEb,EAAAC,QAAAa,cAAA,OAAKC,UAAU,UACff,EAAAC,QAAAa,cAAA,KAAA,KAAA,WACAd,EAAAC,QAAAa,cAAA,KAAA,KAAA,sRAGEd,EAAAC,QAAAa,cAAA,SAAOE,KAAK,OAAOH,MAAOzB,KAAKO,MAAMC,WAAYqB,SAAU7B,KAAKU,YAAaoB,YAAY,aAAYlB,EAAAC,QAAAa,cAAA,KAAA,MACrGd,EAAAC,QAAAa,cAAA,KAAGC,UAAU,UAAb,gCAAmDf,EAAAC,QAAAa,cAAA,IAAA,KAAA,aACnDd,EAAAC,QAAAa,cAAA,KAAGC,UAAU,SAAQf,EAAAC,QAAAa,cAAA,SAAA,KAAA,UAArB,2CACAd,EAAAC,QAAAa,cAAA,KAAA,MACG,EAAAK,EAAAlB,SAAMb,KAAKO,MAAMC,WAAY,uBAAuBU,IAAK,SAACc,EAAMX,GAC/D,GAAIW,EAAK,GACP,OAASpB,EAAAC,QAAAa,cAAA,MAAIO,IAAKZ,GAAIW,0BAYvBnC,sBCjEfqC,EAAAC,EAAAD,QAAAtC,EAAA,GAAAA,EAAA,IAEAwC,MAAAD,EAAAd,EAAA,oEAA2F,KAG3Fa,EAAAE,MAAAD,EAAAd,EAAA,qsCAA0tC\",\"sourcesContent\":[\"import React from 'react';\\nimport Canvas from '../Canvas';\\nimport hanoi from './Hanoi';\\n\\n\\nclass Task1B extends React.Component {\\n\\n  constructor(props){\\n    super(props);\\n    this.state = {\\n      inputValue: '',\\n      differenceError: false\\n    }\\n\\n    this.handleInput = this.handleInput.bind(this);\\n  }\\n\\n  validate(str){\\n    var array = str.split(/,| /).map((item)=> item.split(''));\\n    if (array.length>0){\\n      for (var i = 1; i<array.length; i++){\\n        if (array[i][0]-array[i-1][0]!=1){\\n          this.setState({\\n            differenceError: true\\n          });\\n        }else{\\n          this.setState({\\n            differenceError: false\\n          });\\n        }\\n      }\\n    }\\n  }\\n\\n  handleInput(event){\\n    this.setState({\\n      inputValue: event.target.value\\n    })\\n  }\\n\\n  render() {\\n      return(\\n        <div className='task1b'>\\n        <h3>Task1 B</h3>\\n        <h4>And point of this task was to change color of those figures to white folowing Maxi-Maxi principle.\\n        Main question is my solution optimal. As I understood that this color swapping operation is basic Hanoi towers algoritm\\n        I wrote recursive hanot tower algoritm. It works great.</h4>\\n          <input type='text' value={this.state.inputValue} onChange={this.handleInput} placeholder=\\\"3G 4G 5B\\\"/><br />\\n          <p className='notice'>Type query of figures, like: <i>3G 4G 5G</i></p>\\n          <p className='error'><strong>Error!</strong> Subtraction difference is more than 1!</p>\\n          <ol>\\n            {hanoi(this.state.inputValue, 'CHANGE_ALL_TO_WHITE').map( (elem, i) => {\\n              if (elem[0]){\\n                return ( <li key={i}>{elem}</li> )\\n              }\\n\\n            } )}\\n          </ol>\\n        </div>\\n      );\\n  }\\n}\\n\\n\\n\\nexport default Task1B;\\n\",\"exports = module.exports = require(\\\"../node_modules/css-loader/lib/css-base.js\\\")(false);\\n// imports\\nexports.push([module.id, \\\"@import url(https://fonts.googleapis.com/css?family=Roboto+Slab);\\\", \\\"\\\"]);\\n\\n// module\\nexports.push([module.id, \\\"/*\\\\nfont-family: 'Roboto Slab', serif;\\\\n*/\\\\n\\\\nbody {\\\\n  background-color: #f1f1f1;\\\\n}\\\\n\\\\nh1, h2, h3, h4, h5, h6 {\\\\n  font-family: 'Roboto Slab', serif;\\\\n  color: #444;\\\\n}\\\\n\\\\na {\\\\n  text-decoration: none;\\\\n  color: #444\\\\n}\\\\n\\\\n.container {\\\\n  margin: 50px 20% 0 20%;\\\\n}\\\\n\\\\nul.navbar {\\\\n  display: flex;\\\\n  flex-direction: row;\\\\n  justify-content: center;\\\\n  margin: 10px 30%;\\\\n  height: 40px;\\\\n  align-items: center;\\\\n}\\\\n\\\\nul.navbar  li {\\\\n  list-style-type: none;\\\\n  /* margin: 0 3%; */\\\\n  background-color: #ddd;\\\\n  padding: 0px 5%;\\\\n  height: 100%;\\\\n  align-items: center;\\\\n  display: flex;\\\\n}\\\\n\\\\nul.navbar  li:hover {\\\\n  background-color: #aaaaaa;\\\\n}\\\\n\\\\nbutton {\\\\n  height: 40px;\\\\n  background-color: #ccc;\\\\n  border-style: solid;\\\\n  border-color: #aaaaaa69;\\\\n  border-width: 1px;\\\\n  border-radius: 1px;\\\\n  /* margin: 5px 10px; */\\\\n  color: #444;\\\\n}\\\\n\\\\ninput {\\\\n  /* margin: 5px 10px; */\\\\n  height: 25px;\\\\n  border-radius: 1px;\\\\n  border-style: solid;\\\\n  border-color: #aaaaaa69;\\\\n  border-width: 1px;\\\\n  padding-left: 10px;\\\\n}\\\\n\\\\n.task1 {\\\\n  display: flex;\\\\n\\\\n}\\\\n\\\\n.task1a, .task1b {\\\\n  width: 50%;\\\\n}\\\\n\\\\n.notice {\\\\n  color: #aaaaaa;\\\\n  font-size: 12px;\\\\n}\\\\n\\\\np.error {\\\\n  color: red;\\\\n  background-color: red;\\\\n}\\\\n\\\", \\\"\\\"]);\\n\\n// exports\\n\"]}","code":"webpackHotUpdate(0,{36:function(e,n,t){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),o=i(t(0)),a=(i(t(4)),i(t(10)));function i(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function n(e){!function(e,n){if(!(e instanceof n))throw new TypeError(\"Cannot call a class as a function\")}(this,n);var t=function(e,n){if(!e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!n||\"object\"!=typeof n&&\"function\"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e));return t.state={inputValue:\"\",differenceError:!1},t.handleInput=t.handleInput.bind(t),t}return function(e,n){if(\"function\"!=typeof n&&null!==n)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,o.default.Component),r(n,[{key:\"validate\",value:function(e){var n=e.split(/,| /).map(function(e){return e.split(\"\")});if(n.length>0)for(var t=1;t<n.length;t++)n[t][0]-n[t-1][0]!=1?this.setState({differenceError:!0}):this.setState({differenceError:!1})}},{key:\"handleInput\",value:function(e){this.setState({inputValue:e.target.value})}},{key:\"render\",value:function(){return o.default.createElement(\"div\",{className:\"task1b\"},o.default.createElement(\"h3\",null,\"Task1 B\"),o.default.createElement(\"h4\",null,\"And point of this task was to change color of those figures to white folowing Maxi-Maxi principle. Main question is my solution optimal. As I understood that this color swapping operation is basic Hanoi towers algoritm I wrote recursive hanot tower algoritm. It works great.\"),o.default.createElement(\"input\",{type:\"text\",value:this.state.inputValue,onChange:this.handleInput,placeholder:\"3G 4G 5B\"}),o.default.createElement(\"br\",null),o.default.createElement(\"p\",{className:\"notice\"},\"Type query of figures, like: \",o.default.createElement(\"i\",null,\"3G 4G 5G\")),o.default.createElement(\"p\",{className:\"error\"},o.default.createElement(\"strong\",null,\"Error!\"),\" Subtraction difference is more than 1!\"),o.default.createElement(\"ol\",null,(0,a.default)(this.state.inputValue,\"CHANGE_ALL_TO_WHITE\").map(function(e,n){if(e[0])return o.default.createElement(\"li\",{key:n},e)})))}}]),n}();n.default=l},8:function(e,n,t){(n=e.exports=t(72)(!1)).push([e.i,\"@import url(https://fonts.googleapis.com/css?family=Roboto+Slab);\",\"\"]),n.push([e.i,\"/*\\nfont-family: 'Roboto Slab', serif;\\n*/\\n\\nbody {\\n  background-color: #f1f1f1;\\n}\\n\\nh1, h2, h3, h4, h5, h6 {\\n  font-family: 'Roboto Slab', serif;\\n  color: #444;\\n}\\n\\na {\\n  text-decoration: none;\\n  color: #444\\n}\\n\\n.container {\\n  margin: 50px 20% 0 20%;\\n}\\n\\nul.navbar {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center;\\n  margin: 10px 30%;\\n  height: 40px;\\n  align-items: center;\\n}\\n\\nul.navbar  li {\\n  list-style-type: none;\\n  /* margin: 0 3%; */\\n  background-color: #ddd;\\n  padding: 0px 5%;\\n  height: 100%;\\n  align-items: center;\\n  display: flex;\\n}\\n\\nul.navbar  li:hover {\\n  background-color: #aaaaaa;\\n}\\n\\nbutton {\\n  height: 40px;\\n  background-color: #ccc;\\n  border-style: solid;\\n  border-color: #aaaaaa69;\\n  border-width: 1px;\\n  border-radius: 1px;\\n  /* margin: 5px 10px; */\\n  color: #444;\\n}\\n\\ninput {\\n  /* margin: 5px 10px; */\\n  height: 25px;\\n  border-radius: 1px;\\n  border-style: solid;\\n  border-color: #aaaaaa69;\\n  border-width: 1px;\\n  padding-left: 10px;\\n}\\n\\n.task1 {\\n  display: flex;\\n\\n}\\n\\n.task1a, .task1b {\\n  width: 50%;\\n}\\n\\n.notice {\\n  color: #aaaaaa;\\n  font-size: 12px;\\n}\\n\\np.error {\\n  color: red;\\n  background-color: red;\\n}\\n\",\"\"])}});","extractedComments":[]}