{"map":"{\"version\":3,\"sources\":[\"/home/dulgeoion/projects/vitamin/src/components/subtasks/Task1B.js\"],\"names\":[\"__webpack_require__\",\"Task1B\",\"props\",\"_classCallCheck\",\"this\",\"_this\",\"_possibleConstructorReturn\",\"__proto__\",\"Object\",\"getPrototypeOf\",\"call\",\"state\",\"inputValue\",\"handleInput\",\"bind\",\"_react2\",\"default\",\"Component\",\"event\",\"setState\",\"target\",\"value\",\"createElement\",\"className\",\"type\",\"onChange\",\"_Hanoi2\",\"map\",\"elem\",\"i\",\"key\"],\"mappings\":\"kWAAAA,EAAA,SACAA,EAAA,MACAA,EAAA,6DAGMC,cAEJ,SAAAA,EAAYC,gGAAMC,CAAAC,KAAAH,GAAA,IAAAI,mKAAAC,CAAAF,MAAAH,EAAAM,WAAAC,OAAAC,eAAAR,IAAAS,KAAAN,KACVF,IADU,OAEhBG,EAAKM,OACHC,WAAY,IAGdP,EAAKQ,YAAcR,EAAKQ,YAAYC,KAAjBT,GANHA,qUAFCU,EAAAC,QAAMC,kDAYbC,GACVd,KAAKe,UACHP,WAAYM,EAAME,OAAOC,yCAKzB,OACEN,EAAAC,QAAAM,cAAA,OAAKC,UAAU,UACfR,EAAAC,QAAAM,cAAA,KAAA,KAAA,WACAP,EAAAC,QAAAM,cAAA,KAAA,KAAA,sRAGEP,EAAAC,QAAAM,cAAA,SAAOE,KAAK,OAAOH,MAAOjB,KAAKO,MAAMC,WAAYa,SAAUrB,KAAKS,cAAeE,EAAAC,QAAAM,cAAA,KAAA,MAC/EP,EAAAC,QAAAM,cAAA,KAAGC,UAAU,UAAb,gCAAmDR,EAAAC,QAAAM,cAAA,IAAA,KAAA,aACnDP,EAAAC,QAAAM,cAAA,KAAA,MACG,EAAAI,EAAAV,SAAMZ,KAAKO,MAAMC,WAAY,uBAAuBe,IAAK,SAACC,EAAMC,GAC/D,GAAID,EAAK,GACP,OAASb,EAAAC,QAAAM,cAAA,MAAIQ,IAAKD,GAAID,0BAYvB3B\",\"sourcesContent\":[\"import React from 'react';\\nimport Canvas from '../Canvas';\\nimport hanoi from './Hanoi';\\n\\n\\nclass Task1B extends React.Component {\\n\\n  constructor(props){\\n    super(props);\\n    this.state = {\\n      inputValue: ''\\n    }\\n\\n    this.handleInput = this.handleInput.bind(this);\\n  }\\n\\n\\n  handleInput(event){\\n    this.setState({\\n      inputValue: event.target.value\\n    })\\n  }\\n\\n  render() {\\n      return(\\n        <div className='task1b'>\\n        <h3>Task1 B</h3>\\n        <h4>And point of this task was to change color of those figures to white folowing Maxi-Maxi principle.\\n        Main question is my solution optimal. As I understood that this color swapping operation is basic Hanoi towers algoritm\\n        I wrote recursive hanot tower algoritm. It works great.</h4>\\n          <input type='text' value={this.state.inputValue} onChange={this.handleInput} /><br />\\n          <p className='notice'>Type query of figures, like: <i>3G 4G 5G</i></p>\\n          <ol>\\n            {hanoi(this.state.inputValue, 'CHANGE_ALL_TO_WHITE').map( (elem, i) => {\\n              if (elem[0]){\\n                return ( <li key={i}>{elem}</li> )\\n              }\\n\\n            } )}\\n          </ol>\\n        </div>\\n      );\\n  }\\n}\\n\\n\\n\\nexport default Task1B;\\n\"]}","code":"webpackHotUpdate(0,{36:function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,\"value\"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),o=u(n(0)),r=(u(n(4)),u(n(10)));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={inputValue:\"\"},n.handleInput=n.handleInput.bind(n),n}return function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),a(t,[{key:\"handleInput\",value:function(e){this.setState({inputValue:e.target.value})}},{key:\"render\",value:function(){return o.default.createElement(\"div\",{className:\"task1b\"},o.default.createElement(\"h3\",null,\"Task1 B\"),o.default.createElement(\"h4\",null,\"And point of this task was to change color of those figures to white folowing Maxi-Maxi principle. Main question is my solution optimal. As I understood that this color swapping operation is basic Hanoi towers algoritm I wrote recursive hanot tower algoritm. It works great.\"),o.default.createElement(\"input\",{type:\"text\",value:this.state.inputValue,onChange:this.handleInput}),o.default.createElement(\"br\",null),o.default.createElement(\"p\",{className:\"notice\"},\"Type query of figures, like: \",o.default.createElement(\"i\",null,\"3G 4G 5G\")),o.default.createElement(\"ol\",null,(0,r.default)(this.state.inputValue,\"CHANGE_ALL_TO_WHITE\").map(function(e,t){if(e[0])return o.default.createElement(\"li\",{key:t},e)})))}}]),t}();t.default=l}});","extractedComments":[]}