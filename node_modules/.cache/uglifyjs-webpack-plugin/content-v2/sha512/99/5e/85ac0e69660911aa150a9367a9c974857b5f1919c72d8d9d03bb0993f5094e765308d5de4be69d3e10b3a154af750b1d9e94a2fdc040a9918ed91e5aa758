{"map":"{\"version\":3,\"sources\":[\"/home/dulgeoion/projects/vitamin/src/components/subtasks/Task1B.js\"],\"names\":[\"__webpack_require__\",\"Task1B\",\"props\",\"_classCallCheck\",\"this\",\"_this\",\"_possibleConstructorReturn\",\"__proto__\",\"Object\",\"getPrototypeOf\",\"call\",\"state\",\"inputValue\",\"differenceError\",\"handleInput\",\"bind\",\"validate\",\"_react2\",\"default\",\"Component\",\"str\",\"array\",\"split\",\"map\",\"item\",\"length\",\"i\",\"setState\",\"event\",\"target\",\"value\",\"error\",\"createElement\",\"className\",\"type\",\"onChange\",\"placeholder\",\"_Hanoi2\",\"elem\",\"key\"],\"mappings\":\"kWAAAA,EAAA,SACAA,EAAA,MACAA,EAAA,6DAGMC,cAEJ,SAAAA,EAAYC,gGAAMC,CAAAC,KAAAH,GAAA,IAAAI,mKAAAC,CAAAF,MAAAH,EAAAM,WAAAC,OAAAC,eAAAR,IAAAS,KAAAN,KACVF,IADU,OAEhBG,EAAKM,OACHC,WAAY,GACZC,iBAAiB,GAGnBR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBV,GACnBA,EAAKW,SAAWX,EAAKW,SAASD,KAAdV,GARAA,qUAFCY,EAAAC,QAAMC,+CAahBC,GACP,IAAIC,EAAQD,EAAIE,MAAM,OAAOC,IAAI,SAACC,GAAD,OAASA,EAAKF,MAAM,MACrD,GAAID,EAAMI,OAAO,EACf,IAAK,IAAIC,EAAI,EAAGA,EAAEL,EAAMI,OAAQC,IAC1BL,EAAMK,GAAG,GAAGL,EAAMK,EAAE,GAAG,GAAG,EAC5BtB,KAAKuB,UACHd,iBAAiB,IAGnBT,KAAKuB,UACHd,iBAAiB,wCAOfe,GACVxB,KAAKY,SAASY,EAAMC,OAAOC,OACzB1B,KAAKuB,UACHf,WAAYgB,EAAMC,OAAOC,yCAM7B,IAAIC,EAAQ,GAMV,OAJEA,EADA3B,KAAKO,MAAME,gBACHI,EAAAC,QAAAc,cAAA,KAAGC,UAAU,SAAQhB,EAAAC,QAAAc,cAAA,SAAA,KAAA,UAArB,2CAEF,GAGNf,EAAAC,QAAAc,cAAA,OAAKC,UAAU,UACfhB,EAAAC,QAAAc,cAAA,KAAA,KAAA,WACAf,EAAAC,QAAAc,cAAA,KAAA,KAAA,sRAGEf,EAAAC,QAAAc,cAAA,SAAOE,KAAK,OAAOJ,MAAO1B,KAAKO,MAAMC,WAAYuB,SAAU/B,KAAKU,YAAasB,YAAY,aAAYnB,EAAAC,QAAAc,cAAA,KAAA,MACrGf,EAAAC,QAAAc,cAAA,KAAGC,UAAU,UAAb,gCAAmDhB,EAAAC,QAAAc,cAAA,IAAA,KAAA,aAClDD,EACDd,EAAAC,QAAAc,cAAA,KAAA,MACG,EAAAK,EAAAnB,SAAMd,KAAKO,MAAMC,WAAY,uBAAuBW,IAAK,SAACe,EAAMZ,GAC/D,GAAIY,EAAK,GACP,OAASrB,EAAAC,QAAAc,cAAA,MAAIO,IAAKb,GAAIY,0BAYvBrC\",\"sourcesContent\":[\"import React from 'react';\\nimport Canvas from '../Canvas';\\nimport hanoi from './Hanoi';\\n\\n\\nclass Task1B extends React.Component {\\n\\n  constructor(props){\\n    super(props);\\n    this.state = {\\n      inputValue: '',\\n      differenceError: false\\n    }\\n\\n    this.handleInput = this.handleInput.bind(this);\\n    this.validate = this.validate.bind(this);\\n  }\\n\\n  validate(str){\\n    var array = str.split(/,| /).map((item)=> item.split(''));\\n    if (array.length>0){\\n      for (var i = 1; i<array.length; i++){\\n        if (array[i][0]-array[i-1][0]>1){\\n          this.setState({\\n            differenceError: true\\n          });\\n        }else{\\n          this.setState({\\n            differenceError: false\\n          });\\n        }\\n      }\\n    }\\n  }\\n\\n  handleInput(event){\\n    this.validate(event.target.value);\\n      this.setState({\\n        inputValue: event.target.value\\n      });\\n\\n  }\\n\\n  render() {\\n    var error = '';\\n    if (this.state.differenceError){\\n        error = <p className='error'><strong>Error!</strong> Subtraction difference is more than 1!</p>\\n    } else {\\n      error = '';\\n    }\\n      return(\\n        <div className='task1b'>\\n        <h3>Task1 B</h3>\\n        <h4>And point of this task was to change color of those figures to white folowing Maxi-Maxi principle.\\n        Main question is my solution optimal. As I understood that this color swapping operation is basic Hanoi towers algoritm\\n        I wrote recursive hanot tower algoritm. It works great.</h4>\\n          <input type='text' value={this.state.inputValue} onChange={this.handleInput} placeholder=\\\"3G 4G 5B\\\"/><br />\\n          <p className='notice'>Type query of figures, like: <i>3G 4G 5G</i></p>\\n          {error}\\n          <ol>\\n            {hanoi(this.state.inputValue, 'CHANGE_ALL_TO_WHITE').map( (elem, i) => {\\n              if (elem[0]){\\n                return ( <li key={i}>{elem}</li> )\\n              }\\n\\n            } )}\\n          </ol>\\n        </div>\\n      );\\n  }\\n}\\n\\n\\n\\nexport default Task1B;\\n\"]}","code":"webpackHotUpdate(0,{36:function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(0)),o=(l(n(4)),l(n(10)));function l(e){return e&&e.__esModule?e:{default:e}}var i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={inputValue:\"\",differenceError:!1},n.handleInput=n.handleInput.bind(n),n.validate=n.validate.bind(n),n}return function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:\"validate\",value:function(e){var t=e.split(/,| /).map(function(e){return e.split(\"\")});if(t.length>0)for(var n=1;n<t.length;n++)t[n][0]-t[n-1][0]>1?this.setState({differenceError:!0}):this.setState({differenceError:!1})}},{key:\"handleInput\",value:function(e){this.validate(e.target.value),this.setState({inputValue:e.target.value})}},{key:\"render\",value:function(){var e=\"\";return e=this.state.differenceError?a.default.createElement(\"p\",{className:\"error\"},a.default.createElement(\"strong\",null,\"Error!\"),\" Subtraction difference is more than 1!\"):\"\",a.default.createElement(\"div\",{className:\"task1b\"},a.default.createElement(\"h3\",null,\"Task1 B\"),a.default.createElement(\"h4\",null,\"And point of this task was to change color of those figures to white folowing Maxi-Maxi principle. Main question is my solution optimal. As I understood that this color swapping operation is basic Hanoi towers algoritm I wrote recursive hanot tower algoritm. It works great.\"),a.default.createElement(\"input\",{type:\"text\",value:this.state.inputValue,onChange:this.handleInput,placeholder:\"3G 4G 5B\"}),a.default.createElement(\"br\",null),a.default.createElement(\"p\",{className:\"notice\"},\"Type query of figures, like: \",a.default.createElement(\"i\",null,\"3G 4G 5G\")),e,a.default.createElement(\"ol\",null,(0,o.default)(this.state.inputValue,\"CHANGE_ALL_TO_WHITE\").map(function(e,t){if(e[0])return a.default.createElement(\"li\",{key:t},e)})))}}]),t}();t.default=i}});","extractedComments":[]}